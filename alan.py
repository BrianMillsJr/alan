#!/usr/bin/env python
import nltk
import os
import re
from language import grammar
from senses import ears
import sys

def listen():
  """
    Function to listen. Modes of listening should be added here.
    Could be listening to terminal or mic etc.

    Returns:
      String: Words input from the user.
  """
  print ""
  words = raw_input(">>> ")
  if words == "alan" or words == "voice":
    # Makes a call to the google voice api to get words from mic.
    speak("Yes")
    words = ears.ears()
  return words


def think(words):
  """
    Function to generate some sort of response from the input passed in by listen().

    Args:
      words (String): Words taken in from the listen command.
    Returns:
      String: Returns a response for the given input.
  """
  return grammar.branch(words)


def speak(response):
  """
    Function to speak to the user. Text to speech based on the platform alan is running on.

    Args:
      response (String): The response generated by think().
    Returns:
      None
  """
  print response
  if not response:
    response = "I don't know how to respond to that."
  response = response.encode('ascii', 'ignore')
  #For mac os.
  if sys.platform == "darwin":
    command = "echo \"{}\" | say".format(response)
  else:
    command = "echo \"{}\" | festival --tts".format(response)
  os.system(command)


if __name__ == "__main__":
  """
    Main method should load configurations for alan and initiate interaction loop.
  """
  speak("Hello my name is alan.")
  while True:
    speak(think(listen()))
